{
  "Get-ComputerInfo": {
    "type": "powershell",
    "cmd": "Get-ComputerInfo | ConvertTo-Json -Depth 2"
  },
  "DiskFree": {
    "type": "powershell",
    "cmd": "Get-PSDrive -PSProvider FileSystem | Select Name,Free,Used,Root | ConvertTo-Json -Depth 2"
  },
  "Get-Process": {
    "type": "powershell",
    "cmd": "Get-Process | Select-Object -First 30 | ConvertTo-Json -Depth 2"
  },

  "Ping": {
    "type": "powershell",
    "params": ["host"],
    "cmd": "Test-Connection -ComputerName {{host}} -Quiet | ConvertTo-Json"
  },

  "Restart-Service": {
    "type": "powershell",
    "params": ["service"],
    "cmd": "$ErrorActionPreference='Stop'; $n='{{service}}'; $svc=Get-Service -Name $n -ErrorAction Stop; if($svc.Status -eq 'Running'){ Restart-Service -Name $n -Force } else { Start-Service -Name $n }; $final=(Get-Service -Name $n).Status.ToString(); @{ ok=$true; status=$final } | ConvertTo-Json"
  },

  "Service-Status": {
  "type": "powershell",
  "params": ["service"],
  "cmd": "$n='{{service}}'; $svc=Get-Service -Name $n -ErrorAction SilentlyContinue; $mode=(Get-CimInstance Win32_Service -Filter \"Name='$n'\" -ErrorAction SilentlyContinue).StartMode; @{ name=$n; status=($svc.Status.ToString()); startMode=$mode; canStop=$svc.CanStop } | ConvertTo-Json"
},

  "Service-EnsureRunning": {
  "type": "powershell",
  "params": ["service","startType"],
  "cmd": "$ErrorActionPreference='Stop'; $n='{{service}}'; $st='{{startType}}'; $ok=$true; $err=$null; try{ if($st -in @('Automatic','Manual','Disabled')){ Set-Service -Name $n -StartupType $st } $svc=Get-Service -Name $n; if($svc.Status -ne 'Running'){ Start-Service -Name $n } } catch { $ok=$false; $err=$_.Exception.Message } finally { $svc=Get-Service -Name $n -ErrorAction SilentlyContinue; $mode=(Get-CimInstance Win32_Service -Filter \"Name='$n'\" -ErrorAction SilentlyContinue).StartMode; @{ ok=$ok; error=$err; name=$n; status=($svc.Status.ToString()); startMode=$mode } | ConvertTo-Json }"
},

  "Service-Deps": {
  "type": "powershell",
  "params": ["service"],
  "cmd": "$n='{{service}}'; $svc=Get-Service -Name $n -ErrorAction SilentlyContinue; @($svc.ServicesDependedOn | Select-Object Name,Status) | ConvertTo-Json -Depth 2"
},
  
  "Tail-EventLog": {
    "type": "powershell",
    "params": ["log", "count"],
    "cmd": "Get-WinEvent -LogName {{log}} -MaxEvents {{count}} | Select-Object TimeCreated,Id,LevelDisplayName,ProviderName,Message | ConvertTo-Json -Depth 3"
  },

  "GitPull": {
    "type": "powershell",
    "params": ["path"],
    "cmd": "Set-Location -Path {{path}}; git pull 2>&1 | Out-String"
  },

  "RunScript": {
    "type": "powershell",
    "params": ["path", "args"],
    "cmd": "powershell -NoProfile -ExecutionPolicy Bypass -File {{path}} {{args}} 2>&1 | Out-String"
  }
}
